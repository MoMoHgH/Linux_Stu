容器相关命令
+--------------------------------------------------------------------------------+----------------------------------------------------------------------------------------+
|									         参 数									             									              说明								    	                |
| attach	    Attach to a running container										         | 当前 shell 下 attach 连接指定运行镜像												 	 |
| build		 Build an image from a Dockerfile								         	| 通过 Dockerfile 定制镜像																 |
| commit	    Create a new image from a container changes					         	| 提交当前容器为新的镜像																 |
| cp		    Copy files/folders from the containers filesystem to the host path	| 从容器中拷贝指定文件或者目录到宿主机中												 |
| create	    Create a new container												            | 创建一个新的容器，同 run，但不启动容器												 |
| diff 		 Inspect changes on a container’s filesystem						         | 查看 docker 容器变化																	 |
| events	    Get real time events from the server								         | 从 docker 服务获取容器实时事件														 |
| exec		 Run a command in an existing container							   	   | 在已存在的容器上运行命令																 |
| export	    Stream the contents of a container as a tar archive			   	   | 导出容器的内容流作为一个 tar 归档文件[对应 import ]									 |
| history	 Show the history of an image										            | 展示一个镜像形成历史																	 |
| images	    List images														               | 列出系统当前镜像																		 |
| import	    Create a new filesystem image from the contents of a tarball		   | #从tar包中的内容创建一个新的文件系统映像[对应export]									 |
| info		 Display system-wide information									            | #显示系统相关信息																		 |
| inspect	 Return low-level information on a container						         | 查看容器详细信息																		 |
| kill		 Kill a running container										          	   | kill 指定 docker 容器																	 |
| load		 Load an image from a tar archive								      	   | 从一个 tar 包中加载一个镜像[对应 save]												 |
| login		 Register or Login to the docker registry server		   			   | 注册或者登陆一个 docker 源服务器														 |
| logout	    Log out from a Docker registry server						      		   | 从当前 Docker registry 退出															 |
| logs		 Fetch the logs of a container								      		   | 输出当前容器日志信息																	 |
| port		 Lookup the public-facing port which is NAT-ed to PRIVATE_PORT		   | 查看映射端口对应的容器内部源端口								   						 |
| pause		 Pause all processes within a container								      | 暂停容器																				 |
| ps		    List containers													               | 列出容器列表																			 |
| pull		 Pull an image or a repository from the docker registry server		   | 从docker镜像源服务器拉取指定镜像或者库镜像											 |
| push		 Push an image or a repository to the docker registry server		   | 推送指定镜像或者库镜像至docker源服务器												 |
| restart	 Restart a running container										            | 重启运行的容器																		 |
| rm		    Remove one or more containers										         | 移除一个或者多个容器																     |
| rmi		    Remove one or more images											            | 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] |
| run		    Run a command in a new container									         | 创建一个新的容器并运行一个命令														 |
| save		 Save an image to a tar archive										         | 保存一个镜像为一个 tar 包[对应 load]													 |
| search	    Search for an image on the Docker Hub								         | 在 docker hub 中搜索镜像																 |
| start		 Start a stopped containers											         | 启动容器																				 |
| stop 		 Stop a running containers											            | 停止容器																				 |
| tag	   	 Tag an image into a repository										         | 给源中镜像打标签																		 |
| top		    Lookup the running processes of a container						         | 查看容器中运行的进程信息																 |
| unpause	 Unpause a paused container											         | 取消暂停容器																			 |
| version	 Show the docker version information								         | 查看 docker 版本号																	 |
| wait		 Block until a container stops, then print its exit code			      | 截取容器停止时的退出状态值															 |
+--------------------------------------------------------------------------------+----------------------------------------------------------------------------------------+

   1.1 创建新容器并运行
      docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

        OPTIONS说明：
        
            -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；

            -d: 后台运行容器，并返回容器ID；

            -i: 以交互模式运行容器，通常与 -t 同时使用；

            -P: 随机端口映射，容器内部端口随机映射到主机的端口

            -p: 指定端口映射，格式为：主机(宿主)端口:容器端口

            -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；

            --name="nginx-lb": 为容器指定一个名称；

            --dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；

            --dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；

            -h "mars": 指定容器的hostname；

            -e username="ritchie": 设置环境变量；

            --env-file=[]: 从指定文件读入环境变量；

            --cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；

            -m :设置容器使用内存最大值；

            --net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；

            --link=[]: 添加链接到另一个容器；

            --expose=[]: 开放一个端口或一组端口；

            --volume , -v: 绑定一个卷

        实例：
        
        使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。
        
            # docker run --name mynginx -d nginx:latest
            
        使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。
        
            # docker run -P -d nginx:latest
        
        使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。
        
            # docker run -p 80:80 -v /data:/data -d nginx:latest
        
        绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。
        
            # docker run -p 127.0.0.1:80:8080/tcp ubuntu bash
        
        使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。
        
            # docker run -it nginx:latest /bin/bash
        
        启动交互式容器
        
            # docker run -it centos /bin/bash
       
       
       
       
       
       
       
   1.2 列出容器
      docker ps [OPTIONS]

         OPTIONS说明：

            -a :显示所有的容器，包括未运行的。

            -f :根据条件过滤显示的内容。

            --format :指定返回值的模板文件。

            -l :显示最近创建的容器。

            -n :列出最近创建的n个容器。

            --no-trunc :不截断输出。

            -q :静默模式，只显示容器编号。

            -s :显示总的文件大小。
      





   1.3 创建新容器并运行
   
       1.3.1容器停止退出
         exit
         
       1.3.2容器不停止退出
         ctrl+P+Q
 
 
 
 
   1.4 启动容器
      docker start 容器ID或者容器名   
      
      
      
      
   1.5 重启容器   
      docker restart 容器ID或者容器名
  
  
  
  
   1.6 停止容器
      docker stop 容器ID或者容器名 
      
      
      
      
   1.7 强制停止容器
      docker kill 容器ID或者容器名 



      
   1.8 删除已停止的容器
      docker rm 容器ID

      一次性删除多个容器：
      1. docker rm -f $(docker ps -a -q)
      2. docker ps -a -q | xargs docker rm

   
   
      
   1.9 启动守护式容器
      docker run -d 容器名
      
      
      
      
      
   1.10 查看容器日志
       docker logs -f -t --tail 容器ID
          -t 是加入时间戳
          -f 跟随最新的日志打印
          --tail 数字 显示最后多少条




   1.11 查看容器内运行的进程
       docker top 容器ID




   1.12 查看容器内部细节
       docker inspect 容器ID




   1.13 进入正在运行的容器并以命令行交互
       docker exec -it 容器ID bash
       docker attach 容器ID

         上述两个区别：
            1. attach 直接进入容器启动命令的终端，不会启动新的进程
            2. exec 是在容器中打开新的终端，并且可以启动新的进程




   1.14 从容器内拷贝文件到主机上
         docker cp 容器ID:容器内路径 目的主机路径

  

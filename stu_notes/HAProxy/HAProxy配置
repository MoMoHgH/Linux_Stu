HAProxy 配置文件有5部分组成
 （1） global
             
     用来设置全局配置参数，属于进程级的配置，通常和操作系统配置有关
        
        
 （2） defaults
              
     默认参数的配置部分。此部分配置的参数，默认会引用到下面的 frontend backend listen 部分。因此，某些参数为公共配置时，可以添加在defaults
     中。如果 frontend backend listen 中的参数和此处的配置相同时，则会覆盖此处配置。
              
        
 （3） frontend
              
     此部分用于设置接受用户请求的前端虚拟节点。frontend 可以根据 ACL 规则直接指定要使用的后端 backend
              
              
 （4） backend
        
     此部分用于设置集群后端服务集群的配置，也就是添加一组真实的服务器。添加的真是服务器类似于 LVS 的 real server 节点
        
        
 （5） listen 
              
     此部分为 frontend 和 backend 部分的结合。在 1.3 版本之前 ，所有配置在此部分设置，新版本为了兼容，保留了这一特性
              
              
              
              
HAProxy 配置详解：

 （1） global：
              
      global
          log         127.0.0.1 local2 info       # 此配置表示，使用127.0.0.1上的 rsyslog 服务中的 local2 设备，记录日志等级为 info
                                                    日志等级有 err,warning,info,debug 四种
          chroot      /var/lib/haproxy            # 锁定其目录，为了安全
          
          pidfile     /var/run/haproxy.pid        # HAProxy 进程的 pid 文件
          maxconn     4000                        # 指定可接受的最大并发连接
          user        haproxy                     
          group       haproxy
          daemon                                  # 设置进入后台模式运行
          stats socket /var/lib/haproxy/stats     # 
              


 （2） defaults
            
    defaults   
        mode                    http                    # 设置实例运行的模式。
                                                           tcp 模式 ：此模式下客户端和服务器端之间将建立一个全双工的连接，不会对七层报文
                                                                      做任何类型的检查，经常用于 SSL SSH SMTP 等应用
                                                           http 模式 : 此模式下，客户端请求在转发至后端服务器之前将会被深度分析，所有不与
                                                                       RFC 格式兼容的请求都会被拒绝
                                                           health 模式 ： 此模式基本被废弃
                                                           
        log                     global                   
        option                  httplog
        option                  dontlognull
        option http-server-close
        option forwardfor       except 127.0.0.0/8
        option                  redispatch
        retries                 3                       # 设置后端服务器的失败重试次数，超过次数，后端服务器将被标记为不可用
        timeout http-request    10s
        timeout queue           1m
        timeout connect         10s                     # 设置成功连接到一台服务器的最长等待时长
        timeout client          1m                      # 设置连接客户端发送数据时最长等待时间
        timeout server          1m                      # 设置服务器端回应客户端的数据发送最长等待时间
        timeout http-keep-alive 10s
        timeout check           10s                     # 设置对后端服务器的检测超时时长
        maxconn                 3000
        
        
        
 （3） frontend
      
      
    frontend www                              # 定义了一个名字为 www 的前端虚拟节点 
        bind *:80                             # 此项只能在 frontend 和 backup 中定义
        mode      http                        
        option    httpdlog                    # 默认 HAProxy 是不记录 HTTP 请求的 ，此项启用日志记录 HTTP 请求
        option    forwardfor                  # 如果后端服务器需要获得客户端的 IP ，就要配置此项
        option    httpclose                   # 客户端和服务器端完成一次请求，HAProxy 会主动关闭此 TCP 连接。可以提高性能
        log       gloable                     # 表示使用全局的日志配置
        default_backend   htmpool             # 指定默认的后端服务器池
        
       
       
       
 （4） backend
 
    backend htmpool
        mode      http
        option    redispatch                  # 此参数用于 cookie 保持的环境中。默认情况下，HAProxy 会将其请求的后端服务器的 ServerID插入       
                                                cookie 中，以保证会话 session 的持久性。设置此项，当后端服务器出现故障，将会把客户的请求强制
                                                定向到另外一台健康的后端服务器
        option    abortonclose                # 此项可以在服务器负载很高的情况下，自动结束当前队列中时间比较长的连接
        balance   roundrobin                  # 定义负载均衡算法 
                                                roundrobin : 基于权重轮询，动态算法，支持权重的运行时调整，支持慢启动；每个后端backend中
                                                             最多支持4095个server
                                                static-rr:   基于权重轮询，静态算法，不支持权重的运行时调整及慢启动；后端主机数量无上限
                                                leastconn：  加权最少连接，动态算法，最少连接的后端服务器优先分配接收新连接，相同连接时轮询，
                                                             推荐在较长会话的场景使用，例如MySQL，LDAP等，不适合http
                                                first ：     根据服务器在列表中的位置，自上而下进行调度；前面服务器的连接数达到上限，新请求才会
                                                             分配给下一台服务，不支持权重
                                                source：     源地址hash，新连接先按权重分配，后续连接按source分配请求，实现会话绑定
                                                uri：        对URI的左半部分或整个uri做hash计算，并除以服务器总权重取模，以后派发至某挑出的
                                                             服务器,适用于后端缓存服务器
                                                url_param：  对用户请求的uri中的<params>部分中的参数的值作hash计算，并由服务器总权重相除以后
                                                             派发至某挑出的服务器；通常用于追踪用户，以确保来自同一个用户的请求始终发往同一个Backend Server
                                                hdr          对于每个http请求，此处由<name>指定的http首部将会被取出做hash计算； 并由服务器总权重
                                                             相除以后派发至某挑出的服务器；无有效值的会被轮询调度
                                                             
        cookie    SERVERID                   # 表示可以向cookie插入 ServerID
        option    httpchk GET /index.php     # 启用 HTTP 的服务状态检测功能
        server    web1 172.18.1.1:80  cookie server1 weight 6 check inter 2000 rise 2 fall 3
        server    web2 172.18.1.2:80  cookie server2 weight 6 check inter 2000 rise 2 fall 3
        













